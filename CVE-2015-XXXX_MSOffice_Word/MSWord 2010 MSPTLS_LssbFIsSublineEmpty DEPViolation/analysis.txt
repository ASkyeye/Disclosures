Target: Microsoft Office Word 2010
Module: msptls.dll
Trigger: docx
MSEC: PROBABLY_EXPLOITABLE

	Crash context

(e44.bf0): Access violation - code c0000005 (first chance)First chance exceptions are reported before any exception handling.This exception may be expected and handled.*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\Program Files\Common Files\Microsoft Shared\OFFICE14\MSPTLS.DLL - eax=02325000 ebx=0000000d ecx=00000a10 edx=001a55d4 esi=04e7c480 edi=04e7ff00eip=00000000 esp=001a55a0 ebp=001a5600 iopl=0         nv up ei pl nz na po nccs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=0001020200000000 ??              ???

0:000> kbChildEBP RetAddr  Args to Child              WARNING: Frame IP not in any known module. Following frames may be wrong.001a559c 69702e68 04ee6540 001a55d4 001a5660 0x0001a5600 69714651 0232600c 001a5678 00000001 MSPTLS!LssbFIsSublineEmpty+0x3345001a5630 69715574 02326008 001a5678 001a5704 MSPTLS!LssbFIsSublineEmpty+0x14b2e001a56ac 697156ad 04e7c4e0 001a5704 001a597c MSPTLS!LssbFIsSublineEmpty+0x15a51001a56d4 6970f23a 02326008 001a5850 04e7c4e0 MSPTLS!LssbFIsSublineEmpty+0x15b8a001a58e0 696f4c98 02325000 00000000 00000ccd MSPTLS!LssbFIsSublineEmpty+0xf717……

0:000> !exploitable!exploitable 1.6.0.0Exploitability Classification: PROBABLY_EXPLOITABLERecommended Bug Title: Probably Exploitable - Read Access Violation Near Null at the Instruction Pointer starting at Unknown Symbol @ 0x0000000000000000 called from MSPTLS!LssbFIsSublineEmpty+0x0000000000003345 (Hash=0xbe34e37c.0xe113e931)Access violations at the instruction pointer are probably exploitable if near NULL.

	Analysis

The fail is due to miscalculated call in msptls.dll:

.text:6BDD2E32 loc_6BDD2E32:                           ; CODE XREF: sub_6BDD2BCA+21Dj.text:6BDD2E32                 mov     edx, [eax+0Ch].text:6BDD2E35                 imul    ecx, 0B8h       ; ecx=offset.text:6BDD2E3B                 mov     [ebp+var_2C], edx.text:6BDD2E3E                 mov     edx, [eax+1Ch].text:6BDD2E41                 mov     [ebp+var_28], edx.text:6BDD2E44                 lea     edx, [eax+3Ch].text:6BDD2E47                 mov     [ebp+var_24], edx.text:6BDD2E4A                 mov     edx, [eax+4Ch].text:6BDD2E4D                 mov     [ebp+var_20], edx.text:6BDD2E50                 lea     edx, [ebp+var_4].text:6BDD2E53                 push    edx.text:6BDD2E54                 push    [ebp+arg_10].text:6BDD2E57                 lea     edx, [ebp+var_2C].text:6BDD2E5A                 push    edx.text:6BDD2E5B                 push    dword ptr [eax+70h].text:6BDD2E5E                 mov     eax, [ebp+base] ; eax=base--> .text:6BDD2E61                 call    dword ptr [ecx+eax+234h] ; fail (mso0002).text:6BDD2E68                 jmp     short loc_6BDD2DF7

In the above code, eax points to the memory base and ecx is the counter:

eax=02325000 
ecx=00000a10

0:000> !address eaxUsage:                  <unknown>Base Address:           02320000End Address:            02330000Region Size:            00010000State:                  00001000	MEM_COMMITProtect:                00000004	PAGE_READWRITEType:                   00020000	MEM_PRIVATEAllocation Base:        02320000Allocation Protect:     00000004	PAGE_READWRITE

The referenced memory at [ecx+eax+234h] contains zeroes but seems valid otherwise:

0:000> db ecx+eax+234-1002325c34  00 00 00 00 00 00 00 00-b1 c7 71 69 b1 c7 71 69  ..........qi..qi02325c44  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................

ecx is derived from [edi+8]:

.text:6BDD2DA0 loc_6BDD2DA0:                           ; CODE XREF: v_mso0002+1C9j.text:6BDD2DA9                 mov     ecx, [edi+8]…
.text:6BDD2DB0                 movzx   ebx, word ptr [ecx]…
.text:6BDD2DD7                 movzx   ecx, bx

0:000> db poi(edi+8)02282444  0e 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................02282454  00 98 f2 04 7c a2 3e 00-28 49 3a 00 7c a2 3e 00  ....|.>.(I:.|.>.02282464  7c a2 3e 00 28 49 3a 00-7c a2 3e 00 00 ee 1f 04  |.>.(I:.|.>.....02282474  00 ee 1f 04 40 65 ee 04-f4 24 28 02 4c 53 44 4e  ....@e...$(.LSDN02282484  00 00 00 00 00 00 00 00-01 00 00 80 03 00 00 80  ................02282494  90 06 e7 04 00 00 00 00-02 00 00 00 01 00 00 80  ................022824a4  02 00 00 00 01 00 00 80-00 00 00 00 00 00 00 00  ................022824b4  00 00 00 00 00 00 00 00-0d 00 00 00 04 00 00 00  ................0:000> ? 0e*b8Evaluate expression: 2576 = 00000a100:000> ? ecxEvaluate expression: 2576 = 00000a10

Where is the "0xe" in ecx from:

bp MSPTLS!LssbFIsSublineEmpty+0x14b18
0:000> db poi(poi(ebp+c)+4)-3c022d04bc  0d 00 00 00 04 00 00 00-00 00 18 00 00 00 00 00  ................022d04cc  00 e0 f2 03 7c a2 3e 00-28 49 3a 00 a4 eb 78 00  ....|.>.(I:...x.022d04dc  7c a2 3e 00 28 49 3a 00-a4 eb 78 00 00 ee 1f 04  |.>.(I:...x.....022d04ec  00 ee 1f 04 08 a0 60 02-6c 05 2d 02 4c 53 44 4e  ......`.l.-.LSDN022d04fc  00 00 00 00 08 04 2d 02-04 00 00 80 05 00 00 80  ......-.........022d050c  0c 70 60 02 01 00 00 00-01 00 00 00 04 00 00 80  .p`.............022d051c  01 00 00 00 93 00 00 00-00 00 00 00 00 00 00 00  ................022d052c  40 10 60 02 00 00 00 00-0d 00 00 00 04 00 00 00  @.`.............0:000> ba w4 022d04bc 


0:000> !heap -p -a poi(edi+8)    address 057a2c7c found in    _DPH_HEAP_ROOT @ 11f1000    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)                                 530223c:          57a2c38              3c4 -          57a2000             2000    71088e89 verifier!VerifierDisableFaultInjectionExclusionRange+0x00002f39    775d5ede ntdll!RtlDebugAllocateHeap+0x00000030    7759a40a ntdll!RtlpAllocateHeap+0x000000c4    77565ae0 ntdll!RtlAllocateHeap+0x0000023a    687c410c mso!Ordinal149+0x00007480    6a06fc5a MSPTLS!LssbFIsSublineEmpty+0x00000137    6a06fd10 MSPTLS!LssbFIsSublineEmpty+0x000001ed    6a06fe8d MSPTLS!LssbFIsSublineEmpty+0x0000036a    6a07ece6 MSPTLS!LssbFIsSublineEmpty+0x0000f1c3    6a0649cb MSPTLS!LsCreateContext+0x0000015f    66869224 wwlib!DllGetClassObject+0x00003bc8    66868d2f wwlib!DllGetClassObject+0x000036d3    668683a4 wwlib!DllGetClassObject+0x00002d48    6686808c wwlib!DllGetClassObject+0x00002a30    668653bb wwlib!FMain+0x0000023e    2f251c68 winword!wdGetApplicationObject+0x0000063a    2f251ec2 winword!wdGetApplicationObject+0x00000894    76a2ee1c kernel32!BaseThreadInitThunk+0x0000000e    775737eb ntdll!__RtlUserThreadStart+0x00000070    775737be ntdll!_RtlUserThreadStart+0x0000001b 0:000> u mso!Ordinal149+0x00007480-6mso!Ordinal149+0x747a:687c4106 ff15a416bb67    call    dword ptr [mso!Ordinal10695+0x16a4 (67bb16a4)]687c410c c20400          ret     4687c410f 8b442408        mov     eax,dword ptr [esp+8]687c4113 8b542404        mov     edx,dword ptr [esp+4]687c4117 50              push    eax687c4118 8b410c          mov     eax,dword ptr [ecx+0Ch]687c411b 52              push    edx