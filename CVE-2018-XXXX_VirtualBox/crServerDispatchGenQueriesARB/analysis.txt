Buffer overflow in Oracle VirtualBox crServerDispatchGenQueriesARB

Tested: VirtualBox v5.2.16 x64 
Guest VM: Windows 7 x64
Host OS: Windows 10 x64 (April 2018)


There is an integer overflow vulnerability in the Oracle VirtualBox 3D Acceleration component, that can be reached from a non-privileged Guest VM by sending a specially crafted packet of OpenGL commands to the VirtualBox Guest Additions kernel mode driver. The vulnerability potentially allows to execute arbitrary code on the virtualisation host. 

The memory corruption happens during the processing of the CR_GENQUERIESARB_EXTEND_OPCODE opcode of the Chromium protocol. The actual bug is in the code of crServerDispatchGenQueriesARB function (/src/VBox/HostServices/SharedOpenGL/crserverlib/server_occlude.c):

void SERVER_DISPATCH_APIENTRY
crServerDispatchGenQueriesARB(GLsizei n, GLuint *queries)
{
	GLuint *local_queries = (GLuint *) crAlloc( n * sizeof(*local_queries) ); // <-------- (0)
	(void) queries;
	cr_server.head_spu->dispatch_table.GenQueriesARB( n, local_queries );
	crServerReturnValue( local_queries, n * sizeof(*local_queries) );
	crFree( local_queries );
}

The arguments to crServerDispatchGenQueriesARB are controlled by the Guest VM. At line (0), the calculation of the memory allocation can overflow, if `n` is larger than 0x40000000. Then crAlloc will allocate a buffer which is too small to hold `n` entities. The too-small buffer is then passed to the OS-specific GL function GenQueriesARB, that will write beyond the end of the provided memory buffer. 


Note: while the root cause of the bug is in the code of VirtualBox, the actual memory corruption happens in the OpenGL code provided by the Host OS. Thus it is recommended to test the bug in exactly the same environment as listed in the header of this report to ensure reproducibility. 


See also: 
VBox.log - crash log from VirtualBox VM.
windbg.log - crash log from kernel debugger, demonstrating a heap corruption on the host.
poc.c - proof of concept code.