InternalID: indusoft0003
Target: Indusoft WebStudio Viewer
Module: ISSymbol.ocx
Type of vulnerability: Heap Buffer Overflow

	Exception context

The program crashes upon trying to copy some bytes to bad memory:

MSVCR90!memcpy+0x5a:6423ae7a f3a5            rep movs dword ptr es:[edi],dword ptr [esi]

0:000> kbChildEBP RetAddr  Args to Child              00126054 1017e0e9 01aaa410 0a4a0498 fffffffd MSVCR90!memcpy+0x5aWARNING: Stack unwind information not available. Following frames may be wrong.00126088 1024044f 00630053 00650072 006e0065 ISSymbol!DllUnregisterServer+0x17428900126398 10182649 0a4ec874 00000001 0a4ec874 ISSymbol!DllUnregisterServer+0x2365ef
â€¦ [skip]
0:000> db edi01b34f78  73 00 20 00 6f 00 66 00-66 00 22 00 2c 00 20 00  s. .o.f.f.".,. .01b34f88  22 00 54 00 68 00 65 00-20 00 6d 00 6f 00 74 00  ".T.h.e. .m.o.t.01b34f98  6f 00 72 00 20 00 69 00-73 00 20 00 6f 00 6e 00  o.r. .i.s. .o.n.01b34fa8  22 00 29 00 7d 00 00 00-ca 18 a2 64 00 00 00 88  ".).}......d....01b34fb8  5c df 36 5f 3f 00 00 00-3f 00 00 00 01 00 00 00  \.6_?...?.......01b34fc8  7b 00 49 00 66 00 28 00-46 00 6f 00 6f 00 64 00  {.I.f.(.F.o.o.d.01b34fd8  4d 00 6f 00 74 00 6f 00-72 00 5b 00 46 00 6f 00  M.o.t.o.r.[.F.o.01b34fe8  6f 00 64 00 49 00 44 00-5d 00 3d 00 30 00 2c 00  o.d.I.D.].=.0.,.0:000> db esi0a52b000  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????0a52b010  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????0a52b020  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????0a52b030  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????0a52b040  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????0a52b050  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????0a52b060  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????0a52b070  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????

Checking the `movs` operands to see that it's a heap overflow:

0:000> ? ecxEvaluate expression: 1073599781 = 3ffdd525
0:000> !address esiUsage:                  HeapBase Address:           0a52b000End Address:            0a8c0000Region Size:            00395000State:                  00002000	MEM_RESERVEProtect:                <info not present at the target>Type:                   00020000	MEM_PRIVATEAllocation Base:        0a4c0000Allocation Protect:     00000004	PAGE_READWRITEMore info:              heap owning the address: !heap 0x3b0000More info:              heap segmentMore info:              heap entry containing the address: !heap -x 0xa52b0000:000> !address esi-1Usage:                  HeapBase Address:           0a4c0000End Address:            0a52b000Region Size:            0006b000State:                  00001000	MEM_COMMITProtect:                00000004	PAGE_READWRITEType:                   00020000	MEM_PRIVATEAllocation Base:        0a4c0000Allocation Protect:     00000004	PAGE_READWRITEMore info:              heap owning the address: !heap 0x3b0000More info:              heap segmentMore info:              heap entry containing the address: !heap -x 0xa52afff

	Root cause

The size of the copied bytes is read from the input file:
ISSymbol!DllUnregisterServer+0x174260:1017e0c0 8b8840010000    mov     ecx,dword ptr [eax+140h]1017e0c6 894df8          mov     dword ptr [ebp-8],ecx1017e0c9 8b55e0          mov     edx,dword ptr [ebp-20h] ; ptr to input file1017e0cc 8b4208          mov     eax,dword ptr [edx+8] 1017e0cf 0fbf08          movsx   ecx,word ptr [eax]1017e0d2 51              push    ecx	; memcpy() Size1017e0d3 8b55e0          mov     edx,dword ptr [ebp-20h] ; ptr to input file1017e0d6 8b4208          mov     eax,dword ptr [edx+8]1017e0d9 50              push    eax	; memcpy() Src1017e0da 8b4df8          mov     ecx,dword ptr [ebp-8]1017e0dd 8b9148270000    mov     edx,dword ptr [ecx+2748h]1017e0e3 52              push    edx	; memcpy() Dst
; call to memcpy() -> crash:1017e0e4 e8614d1d00      call    ISSymbol!DllUnregisterServer+0x348fea (10352e4a)1017e0e9 83c40c          add     esp,0Ch1017e0ec c745f401000000  mov     dword ptr [ebp-0Ch],11017e0f3 8d45f4          lea     eax,[ebp-0Ch]3rd dword on the stack is the size parameter (a0):
0:000> db esp0012605c  10 a4 aa 01 60 15 4b 0a-a0 00 00 00 64 4a 4e 0a  ....`.K.....dJN.0012606c  04 49 4e 0a 80 60 12 00-24 13 23 10 64 55 49 0a  .IN..`..$.#.dUI.0012607c  00 00 00 00 c8 5b aa 01-bc 01 24 10 98 63 12 00  .....[....$..c..0012608c  cd 01 24 10 00 00 00 00-00 00 00 00 00 00 00 00  ..$.............0012609c  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................001260ac  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................001260bc  00 00 00 00 04 49 4e 0a-00 00 00 00 00 00 00 00  .....IN.........001260cc  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
The same value we can see in the input file:

0:000> db poi(poi(ebp-20)+8)0a4b1560  a0 00 21 00 0d 04 00 00-0a 00 01 08 00 00 00 23  ..!............#0a4b1570  00 43 00 6f 00 75 00 6e-00 74 00 65 00 72 00 00  .C.o.u.n.t.e.r..0a4b1580  00 2f 00 ff ff 00 00 00-00 00 00 2a 00 01 00 2f  ./.........*.../0a4b1590  00 00 00 00 00 00 00 00-00 02 00 02 00 00 00 2f  .............../0a4b15a0  00 2f 00 10 04 01 00 03-04 01 00 0a 00 01 08 00  ./..............0a4b15b0  00 00 23 00 43 00 6f 00-75 00 6e 00 74 00 65 00  ..#.C.o.u.n.t.e.0a4b15c0  72 00 00 00 2f 00 ff ff-00 00 00 00 00 00 01 00  r.../...........0a4b15d0  2f 00 00 00 00 00 00 00-00 00 02 00 02 00 00 00  /...............

So, we can fill the current heap chunk with arbitrary controlled bytes, which is most probably exploitable.